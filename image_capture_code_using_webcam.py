# -*- coding: utf-8 -*-
"""image_capture_code_using_webcam

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gL5DIjIC1HMvL6VNaLkeS8iG6gkBCnUM
"""

import os
import cv2
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from IPython.display import display, Javascript
from google.colab.output import eval_js
from base64 import b64decode
import matplotlib.pyplot as plt
import time
from google.colab import drive

drive.mount('/content/drive')

# Copy the images to a folder in your Google Drive
!cp -r /content/person_images/content/drive/MyDrive/

# Function to capture image from webcam
def capture_image():
    js = Javascript('''
        async function takePhoto() {
            const div = document.createElement('div');
            const video = document.createElement('video');
            const canvas = document.createElement('canvas');
            document.body.appendChild(div);
            div.appendChild(video);
            div.appendChild(canvas);
            div.setAttribute('style', 'text-align: center');
            const stream = await navigator.mediaDevices.getUserMedia({video: true});
            video.srcObject = stream;
            await new Promise((resolve) => {
                video.onloadedmetadata = () => {
                    video.play();
                    resolve();
                };
            });
            await new Promise((resolve) => setTimeout(resolve, 1000));  // Allow camera to initialize
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            canvas.getContext('2d').drawImage(video, 0, 0);
            stream.getTracks().forEach(track => track.stop());
            const imageDataURL = canvas.toDataURL('image/jpeg');
            return imageDataURL;
        }
    ''')
    display(js)
    data = eval_js('takePhoto()')
    binary = b64decode(data.split(',')[1])
    img = np.frombuffer(binary, dtype=np.uint8)
    img = cv2.imdecode(img, cv2.IMREAD_COLOR)
    return img

# Define the number of images per person and the list of person names
num_images_per_person = 10
person_names = ["udara"]
save_base_dir = '/content/drive/MyDrive/person_images_1'
os.makedirs(save_base_dir, exist_ok=True)

def capture_images_for_person(person_name):
    person_dir = os.path.join(save_base_dir, person_name)
    os.makedirs(person_dir, exist_ok=True)

    for i in range(num_images_per_person):
        img = capture_image()
        file_path = os.path.join(person_dir, f'{person_name}_{i:04d}.jpg')
        cv2.imwrite(file_path, img)
        print(f"Saved {file_path}")
        time.sleep(1)  # Wait for 1 second before capturing the next image

for person_name in person_names:
    print(f"Capturing images for {person_name}")
    capture_images_for_person(person_name)